{{'{{'}}$rack_number := "{{rack_number}}"{{'}}'}}{% raw %}## rack_number: {{$rack_number}}
{{$hostname := getenv "HOSTNAME"}}## hostname: {{$hostname}}
{{$rack_subnet := getv (printf "/racks/%s/subnet" $rack_number)}}## rack_subnet: {{$rack_subnet}}
{{$TOR_ipaddr := getv (printf "/racks/%s/tor" $rack_number)}}## TOR_ipaddr: {{$TOR_ipaddr}}
{{$master_ipaddr := getv (printf "/racks/%s/veth/0" $rack_number)}}## master_ipaddr: {{$master_ipaddr}}
{{$master_asnum := getv "/racks/0/as_number"}}## master_asnum: {{$master_asnum}}
{{$local_asnum := getv (printf "/racks/%s/as_number" $rack_number)}}## local_asnum: {{$local_asnum}}

# Configure logging
#log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
log stderr all;
#log "/var/log/bird/tor{{$rack_number}}.log" all;
# Override router ID
router id {{$TOR_ipaddr}};

#include "/etc/bird/calico_os_filters.conf";

# Turn on global debugging of all protocols
debug protocols all;

protocol kernel {
  learn;          # Learn all alien routes from the kernel
  persist;        # Don't remove routes on bird shutdown
  scan time 2;    # Scan kernel routing table every 2 seconds
  import all;
  graceful restart;
  export all;     # Default is export none
}

protocol direct {
  interface "*";         # For exclude the ARCnets, use "-arc*", "*"
  #check link yes;
}

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 2;    # Scan interfaces every 2 seconds
}

#<%- @rr_clients.each do |name, ipaddr| -%>
#include "/etc/bird/peers/compute__<%= name %>.conf";
#<%- end -%>

# session with master
protocol bgp 'master-{{$master_ipaddr}}' {
  local as {{$local_asnum}};
  neighbor {{$master_ipaddr}} as {{$master_asnum}};
  description "master";
  import all;
  export all;
  next hop self;
}

# sessions with my RRs
{{range $i := lsdir "/nodes"}} {{if eq (getv (printf "/nodes/%s/rack_no" $i)) $rack_number}} {{if (exists (printf "/nodes/%s/node_roles/1" $i))}} {{if eq (getv (printf "/nodes/%s/node_roles/1" $i)) "rr"}}
protocol bgp '{{$i}}' {
  local as {{$local_asnum}};
  neighbor {{getv (printf "/nodes/%s/ipaddr" $i)}} as {{$local_asnum}};
  description "RR-{{$i}}";
  multihop;
  import all;
  export all;
  next hop self;
}
{{end}} {{end}} {{end}} {{end}}
{% endraw %}
